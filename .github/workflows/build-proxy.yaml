name: Build Proxy Image

on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
    branches: [main]

env:
  PLATFORMS: linux/amd64,linux/arm64
  ARCHS: amd64,arm64
  IMAGE_PREFIX: ghcr.io/webmeshproj/vdi
  VERSION: ${{ startswith(github.ref, 'refs/tags/v') && github.ref || 'latest' }}
  COSIGN_EXPERIMENTAL: "1"

jobs:
  build:
    name: Build Proxy Images
    runs-on: self-hosted
    permissions:
      contents: "write"
      id-token: "write"
      packages: "write"
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        container:
          - kvdi-proxy
        include:
          - container: kvdi-proxy
            tag-suffix: proxy
            name: Build KVDI Proxy Image

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login to GHCR
        uses: docker/login-action@v3
        if: ${{ github.event_name != 'pull_request' }}
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3s
        with:
          platforms: ${{ env.ARCHS }}

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: ${{ matrix.name }}
        uses: docker/build-push-action@v5
        id: docker-build
        env:
          TAG: ${{ startswith(github.ref, 'refs/tags/v') && github.ref || 'latest' }}
          LDFLAGS: -s -w -X github.com/kvdi/kvdi/pkg/version.Version=${{ env.VERSION }} -X github.com/kvdi/kvdi/pkg/version.GitCommit=${{ github.sha }}
        with:
          context: .
          file: build/Dockerfile.${{ matrix.container }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.IMAGE_PREFIX }}-${{ matrix.tag-suffix }}:${{ env.VERSION }}
          platforms: ${{ env.PLATFORMS }}
          cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}-${{ matrix.tag-suffix }}:${{ env.VERSION }}
          cache-to: type=inline
          build-args: |
            LDFLAGS=${{ env.LDFLAGS }}
